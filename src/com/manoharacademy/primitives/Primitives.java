package com.manoharacademy.primitives;

public class Primitives {

    public static void main(String[] args) {
//        We are going to revisit primitives in this lesson
        boolean boolean1 = true;
        boolean boolean2 = false;
        
//	WholeNumbers (signed numbers stored in binary 2's complement form)
//		byte   - 1 BYTE  	- (                      -128 to 127				) (-pow(2,7)  to pow(2,7)-1 )
//		short  - 2 BYTES	- (                   -32,768 to 32,767				) (-pow(2,15) to pow(2,15)-1)
//		int    - 4 BYTES	- (            -2,147,483,648 to 2,147,483, 647			) (-pow(2,31) to pow(2,31)-1)
//		long   - 8 BYTES	- (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807	) (-pow(2,63) to pow(2,63)-1)
       
        byte maxByteValue = -128;
        short maxShortValue = 32767;
        int maxIntValue = 2147483647;
        long maxLongValue = 9223372036854775807L;
        
//      127 = 1*pow(10,2) + 2*pow(10,1) + 7*pow(10,0)

//              0000000    -   0
//		0000001    -   1
//		0000010    -   2
//		0000011    -   3
//		0000100    -   4
//		0000101    -   5
//		0000110    -   6
//		0000111    -   7  
//		0001000    -   8
//		0001001    -   9
//		0001010    -   10 = 1*pow(2,3) + 0*pow(2,2) + 1*pow(2,1) + 0*pow(2,0) = 8+0+2+0 = 10
//		0001011    -   11
//		0001100    -   12
//		0001101    -   13
//		0001110    -   14
//		0001111    -   15
//		0010000    -   16
//		0010001    -   17
//		0010010    -   18
//		0010011    -   19
//		0010100    -   20
//		0010101    -   21
//		0010110    -   22
//		0010111    -   23
//		0011000    -   24
//		0011001    -   25
//		0011010    -   26
//		0011011    -   27
//		0011100    -   28
//		0011101    -   29
//		0011110    -   30
//		0011111    -   31
//		0100000    -   32
//		0100001    -   33
//		0100010    -   34
//		0100011    -   35
//		0100100    -   36
//		0100101    -   37
//		0100110    -   38
//		0100111    -   39
//		0101000    -   40
//		0101001    -   41
//		0101010    -   42
//		0101011    -   43
//		0101100    -   44
//		0101101    -   45
//		0101110    -   46
//		0101111    -   47
//		0110000    -   48
//		0110001    -   49
//		0110010    -   50
//		0110011    -   51
//		0110100    -   52
//		0110101    -   53
//		0110110    -   54
//		0110111    -   55
//		0111000    -   56
//		0111001    -   57
//		0111010    -   58
//		0111011    -   59
//		0111100    -   60
//		0111101    -   61
//		0111110    -   62
//		0111111    -   63
//		1000000    -   64
//		1000001    -   65
//		1000010    -   66
//		1000011    -   67
//		1000100    -   68
//		1000101    -   69
//		1000110    -   70
//		1000111    -   71
//		1001000    -   72
//		1001001    -   73
//		1001010    -   74
//		1001011    -   75
//		1001100    -   76
//		1001101    -   77
//		1001110    -   78
//		1001111    -   79
//		1010000    -   80
//		1010001    -   81
//		1010010    -   82
//		1010011    -   83
//		1010100    -   84
//		1010101    -   85
//		1010110    -   86
//		1010111    -   87
//		1011000    -   88
//		1011001    -   89
//		1011010    -   90
//		1011011    -   91
//		1011100    -   92
//		1011101    -   93
//		1011110    -   94
//		1011111    -   95
//		1100000    -   96
//		1100001    -   97
//		1100010    -   98
//		1100011    -   99
//		1100100    -   100
//		1100101    -   101
//		1100110    -   102
//		1100111    -   103
//		1101000    -   104
//		1101001    -   105
//		1101010    -   106
//		1101011    -   107
//		1101100    -   108
//		1101101    -   109
//		1101110    -   110
//		1101111    -   111
//		1110000    -   112
//		1110001    -   113
//		1110010    -   114
//		1110011    -   115
//		1110100    -   116
//		1110101    -   117
//		1110110    -   118
//		1110111    -   119
//		1111000    -   120
//		1111001    -   121
//		1111010    -   122
//		1111011    -   123
//		1111100    -   124
//		1111101    -   125
//		1111110    -   126
//		1111111    -   127


//	char - 2 BYTE - utf16 encoding - unsigned -  0 to 65,536 
//			'A'
//			65
//			'\u0041'
//			
	char c1 = 'A';
	char c2 =  65;
	char c3= '\u0041'; 
        
        char c11 = '\uD801';
        char c12 = '\uDC37';
//	(if it falls in range 0xD800..0xDBFF or 0xDC00..0xDFFF then it is only single code unit of a code point)
//        https://en.wikipedia.org/wiki/UTF-16
//      D801 DC37 - code point - has 2 code units

//      Floating point numbers (IEEE 754 )
//      float  (±1.40129846432481707e-45  to ±3.40282346638528860e+38 ). with  6 or  7 significant decimal digits
//	double (±4.94065645841246544e-324 to ±1.79769313486231570e+308)  with 14 or 15 significant decimal digits

    float float1 = 123.456f;
    float float2 = 1.23456e+2f;
    float float3 = 12345.6e-2f;
//http://introcs.cs.princeton.edu/java/91float/

    int int1 = 87654321;
    float float4 = int1;
        System.out.printf("%22.21f\n",float4);
        
    float float5 = 0.1f;
        System.out.printf("%22.21f\n",float5);
      
//        in decimal 1/3 = 0.33333333...


    }
}
